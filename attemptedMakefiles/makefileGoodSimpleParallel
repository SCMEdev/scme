# New make file by JÃ–. 
#This is a quite simple makefile that first makes sure that the modules are made by serially checking/creating them in the listed order. 
#Then the objects are comiled in parallel independent of order. 


# disable the built-in (implicit) rules to avoid trying to compile X.o from X.mod (Modula-2 program)
.SUFFIXES:

BD = build
SRCD = src

vpath %.f90 $(SRCD)
vpath %.cpp $(SRCD)


FC = gfortran
CC = g++
#           remove flags from there on:   for faster compile + slower execution
FFLAGS = -I$(BD) -J$(BD) -pg -fPIC 		-Ofast -march=native  -msoft-float -mavx  # 
CFLAGS = -I$(BD) -J$(BD) -lstdc++ 		-Ofast -march=native #-O2 

######################################### Files in order:  
files_by_dependency = ${addprefix $(BD)/,  \
data_types \
parameters \
max_parameters \
multipole_parameters \
polariz_parameters \
calcEnergy_mod \
tang_toennies \
molecProperties \
calc_derivs \
calc_higher_order \
calc_lower_order \
inducePoles \
forceCM_mod \
torqueCM_mod \
mdutil \
molforce \
atomicForces_mod \
dispersion_mod \
rho \
coreInt_mod \
scme   }

fort_obj = $(files_by_dependency:=.o)
fort_mod = $(files_by_dependency:=.mod)
cpp_obj = $(BD)/ps.o

######################################### making:
all:
	make -j1 makemodules
	make -j4 makeobjects

######################################### making modules:
makemodules:$(fort_mod)



# gfortran doesn't update good module files even if the corresponding object file is updated, therfore "touch $@". 
# otherwise the old module file causes this command to execute every time. 
# the alternative would be to make modules separately at from-scratch compiles, and thus separate the "makemodules" 
# and "makeobjects" into two different commands. 

$(fort_mod):$(BD)/%.mod: %.f90
	$(FC) $(FFLAGS) -fsyntax-only $<; touch $@
	

######################################### making objects:
makeobjects: $(BD)/libscme.a

$(BD)/libscme.a: $(cpp_obj) $(fort_obj) $(fort_mod)
	ar rcs $@ $^ 


$(BD)/%.o: %.f90 
	$(FC) $(FFLAGS) -c $< -o $@

$(BD)/%.o: %.cpp
	$(CC) $(CFLAGS) -c $< -o $@

######################################### clean:
.PHONY: clean remake
clean:
	rm $(addprefix $(BD)/, *.o *.a *.mod)

remake: 
	make clean
	make

