
# disable the built-in (implicit) rules to avoid trying to compile X.o from X.mod (Modula-2 program)
.SUFFIXES:
#.SUFFIXES: .f90 .o .cpp

BD = build
SRCD = src

vpath %.f90 $(SRCD)
vpath %.cpp $(SRCD)
#vpath %.mod $(BD)


FC = gfortran
CC = g++
FFLAGS = -I$(BD) -J$(BD)  #-pg -fPIC -Ofast -march=native  -msoft-float -mavx  #
CFLAGS = -I$(BD) -J$(BD) #-O2 -lstdc++ -Ofast -march=native
#-O3

######################################### Files in order:  
fort_obj = $(addprefix $(BD)/,  \
	data_types.o parameters.o max_parameters.o \
	multipole_parameters.o polariz_parameters.o \
	calcEnergy_mod.o tang_toennies.o molecProperties.o calc_higher_order.o calc_lower_order.o \
	inducePoles.o calc_derivs.o forceCM_mod.o torqueCM_mod.o \
	mdutil.o molforce.o atomicForces_mod.o \
	dispersion_mod.o rho.o coreInt_mod.o \
	scme.o )

fort_mod = $(fort_obj:.o=.mod)
cpp_obj = $(BD)/ps.o

######################################### 

all:
	#make -j1 makemodules
	make -j1 makeobjects

#makemodules:$(fort_mod)

#$(fort_mod):$(BD)/%.mod: %.f90
#	$(FC) $(FFLAGS) -fsyntax-only $<; touch $@
	

 ##sen: sätt istället libscme.a
makeobjects: $(BD)/libscme.a


$(BD)/libscme.a: $(fort_obj) $(cpp_obj) $(fort_mod)
	ar rcs $@ $^ 

$(fort_mod):$(BD)/%.mod: %.f90
	$(FC) $(FFLAGS) -fsyntax-only $<; touch $@



#$(BD)/libscme.a: $(fort_obj) $(cpp_obj) 
#	ar rcs $@ $^ 

$(BD)/%.o: %.f90 
	$(FC) $(FFLAGS) -c $< -o $@

$(BD)/%.o: %.cpp
	$(CC) $(CFLAGS) -c $< -o $@

######################################### Clean:
.PHONY: clean
clean:
	rm $(addprefix $(BD)/, *.o *.a *.mod)

remake: 
	make clean
	make

